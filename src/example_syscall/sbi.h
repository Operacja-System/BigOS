// THIS IS GENERATED BY GEMINI

#ifndef SBI_H
#define SBI_H

#include <stdint.h>

// Standardowe SBI Extension IDs (EIDs)
#define SBI_EXT_BASE 0x10
#define SBI_EXT_TIME 0x54494D45
#define SBI_EXT_IPI 0x735049
#define SBI_EXT_RFENCE 0x52464E43
#define SBI_EXT_HSM 0x48534D
#define SBI_EXT_SRST 0x53525354 // System Reset Extension
#define SBI_EXT_PMU 0x504D55
#define SBI_EXT_DBCN 0x4442434E // Debug Console Extension (nowe, preferowane nad legacy)

// Function IDs dla SBI_EXT_DBCN (Debug Console)
#define SBI_EXT_DBCN_CONSOLE_WRITE 0x0
#define SBI_EXT_DBCN_CONSOLE_READ 0x1
#define SBI_EXT_DBCN_CONSOLE_WRITE_BYTE 0x2


// Starsze (Legacy) SBI Extensions (nadal często wspierane)
#define SBI_LEGACY_SET_TIMER 0x00
#define SBI_LEGACY_CONSOLE_PUTCHAR 0x01
#define SBI_LEGACY_CONSOLE_GETCHAR 0x02
#define SBI_LEGACY_CLEAR_IPI 0x03
#define SBI_LEGACY_SEND_IPI 0x04
#define SBI_LEGACY_REMOTE_FENCE_I 0x05
#define SBI_LEGACY_REMOTE_SFENCE_VMA 0x06
#define SBI_LEGACY_REMOTE_SFENCE_VMA_ASID 0x07
#define SBI_LEGACY_SHUTDOWN 0x08 // Legacy shutdown


// Struktura do przechowywania wyniku wywołania SBI (zgodnie ze specyfikacją SBI)
typedef struct {
    long error; // Wartość z rejestru a0 po wywołaniu SBI
    long value; // Wartość z rejestru a1 po wywołaniu SBI
} sbi_ret_t;


// Funkcja pomocnicza do wykonywania wywołań SBI
// UWAGA: W naszym scenariuszu z delegowanymi ecallami S-mode, bezpośrednie użycie tej funkcji
// z S-mode do wywołania usług M-mode (jak console_putchar, shutdown) spowoduje pułapkę
// z powrotem do S-mode. Zamiast tego, dla I/O używamy bezpośredniego dostępu do UART.
// Ta funkcja jest zachowana dla wywołań, które mogą być obsługiwane przez S-mode (np. przyszłe rozszerzenia)
// lub do demonstracji problemu z delegowaniem.
static inline sbi_ret_t sbi_call(long eid, long fid, long arg0, long arg1, long arg2, long arg3, long arg4, long arg5) {
    register long a7 asm("a7") = eid;
    register long a6 asm("a6") = fid;
    register long a0 asm("a0") = arg0;
    register long a1 asm("a1") = arg1;
    register long a2 asm("a2") = arg2;
    register long a3 asm("a3") = arg3;
    register long a4 asm("a4") = arg4;
    register long a5 asm("a5") = arg5;

    __asm__ volatile (
        "ecall"
        : "+r"(a0), "+r"(a1)
        : "r"(a2), "r"(a3), "r"(a4), "r"(a5), "r"(a6), "r"(a7)
        : "memory"
    );

    sbi_ret_t result;
    result.error = a0;
    result.value = a1;
    return result;
}


// Zatrzymanie systemu (Nowe rozszerzenie System Reset)
#define SBI_SRST_SYSTEM_RESET_TYPE_SHUTDOWN 0x00000000
#define SBI_SRST_SYSTEM_RESET_TYPE_COLD_REBOOT 0x00000001
#define SBI_SRST_SYSTEM_RESET_TYPE_WARM_REBOOT 0x00000002

// Ta funkcja wywoła ecall, który zostanie przechwycony przez nasz S-mode trap handler.
static inline void sbi_system_reset(uint32_t reset_type, uint32_t reset_reason) {
     sbi_call(SBI_EXT_SRST, 0, reset_type, reset_reason, 0, 0, 0, 0);
     // Nie powinno wrócić, jeśli trap handler zapętli się poprawnie.
}

// Domyślna funkcja do zatrzymania systemu
#define sbi_shutdown() sbi_system_reset(SBI_SRST_SYSTEM_RESET_TYPE_SHUTDOWN, 0)

#endif
